import{r as e}from"./p-d4a5553e.js";const t=class{constructor(t){e(this,t),this.dbname="bp-persistent-storage-default",this.dbversion=1,this.dbstorename="key-value-default",this.db=null}async setKey(e,t){const s={received:+new Date,saved:void 0};return new Promise(((r,i)=>{this.getObjectStore(this.dbstorename,"readwrite").then((i=>{s.saved=+new Date;const n=i.put({key:e,value:t,time:s});n.onerror=e=>{throw e},n.onsuccess=()=>r({key:e,value:t,time:s})})).catch((s=>{i({key:e,value:t,error:s})}))}))}async getKey(e){return new Promise(((t,s)=>{this.getObjectStore(this.dbstorename,"readonly").then((s=>{const r=s.get(e);r.onerror=e=>{throw e},r.onsuccess=()=>t(Object.assign({key:e,value:void 0,time:void 0},r.result))})).catch((t=>s({key:e,error:t})))}))}openDb(){return new Promise(((e,t)=>{if(this.db)return e(this.db);const s=indexedDB.open(this.dbname,this.dbversion);s.onsuccess=()=>{this.db=s.result,e(this.db)},s.onerror=e=>{t(e.target.errorCode)},s.onupgradeneeded=e=>{e.currentTarget.result.createObjectStore(this.dbstorename,{keyPath:"key",autoIncrement:!1})}}))}getObjectStore(e,t){return new Promise(((s,r)=>this.openDb().then((r=>{const i=r.transaction(e,t);s(i.objectStore(e))})).catch((e=>{r(e)}))))}componentWillLoad(){this.openDb().catch((e=>console.error(`openDb [${this.dbname}/${this.dbversion}/${this.dbstorename}]:`,e)))}render(){return null}};export{t as bp_persistent_storage}