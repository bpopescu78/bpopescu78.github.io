/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface BpPersistentStorage {
        /**
          * The IndexedDB's database name
         */
        "DB_NAME": string;
        /**
          * The database store name
         */
        "DB_STORE_NAME": string;
        /**
          * The database version
         */
        "DB_VERSION": number;
        /**
          * Reads the `value` and `time` info for a given `key` from the database. If the `key` does not exist, `value` and `time` will be undefined.  ```ts getKey(key: string)    .then(resolveObject => ...)    .catch(rejectObject => ...) ``` * resolves with an Object    ```ts    resolveObject: {      key: string,      value: Object,      time: {        received: number,        saved: number      }    })    ```    where time holds the timestamps:    - when the `setKey` request was received    - when the `key` - `value` pair was saved in the database     If the `key` is _not_ found in the database, the `Promise` will still be resolved, but the Object will look like    ```ts    resolveObject: {      key: string,      value: undefined,      time: undefined    })    ``` * or rejects with an Object    ```ts    rejectObject: {      key: string,      error: Object    })    ```    The rejection reason can be displayed using    ```ts    console.error(rejectObject.error)    ```
         */
        "getKey": (key: string) => Promise<object>;
        /**
          * Writes the `key` - `value` pair in the database. If the `key` already exists in the database, the new `value` will overwrite the existing `value`.  ```ts setKey(key: string, value: Object)    .then(resolveObject => ...)    .catch(rejectObject => ...) ``` * resolves with an Object    ```ts    resolveObject: {      key: string,      value: Object,      time: {        received: number,        saved: number      }    })    ```    where time holds the timestamps:    - when the `setKey` request was received    - when the `key` - `value` pair was saved in the database * or rejects with an Object    ```ts    rejectObject: {      key: string,      value: Object,      error: Object    })    ```    The rejection reason can be displayed using    ```ts    console.error(rejectObject.error)    ```
         */
        "setKey": (key: string, value: object) => Promise<object>;
    }
}
declare global {
    interface HTMLBpPersistentStorageElement extends Components.BpPersistentStorage, HTMLStencilElement {
    }
    var HTMLBpPersistentStorageElement: {
        prototype: HTMLBpPersistentStorageElement;
        new (): HTMLBpPersistentStorageElement;
    };
    interface HTMLElementTagNameMap {
        "bp-persistent-storage": HTMLBpPersistentStorageElement;
    }
}
declare namespace LocalJSX {
    interface BpPersistentStorage {
        /**
          * The IndexedDB's database name
         */
        "DB_NAME"?: string;
        /**
          * The database store name
         */
        "DB_STORE_NAME"?: string;
        /**
          * The database version
         */
        "DB_VERSION"?: number;
    }
    interface IntrinsicElements {
        "bp-persistent-storage": BpPersistentStorage;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "bp-persistent-storage": LocalJSX.BpPersistentStorage & JSXBase.HTMLAttributes<HTMLBpPersistentStorageElement>;
        }
    }
}
